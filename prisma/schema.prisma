// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  // set to `prisma` when using PlanetScale database, otherwise set to `foreignKeys`
  relationMode = "prisma"
}

model Customer {
  id           String  @id @default(uuid())
  name         String?
  phone_number String  @unique
  city         String?
  village      String?
  device_token String?

  otp_token CustomerOtpToken?
  tickets   Ticket[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model CustomerOtpToken {
  id  String @id @default(uuid())
  otp String @unique @db.Char(6)

  customer    Customer @relation(fields: [customer_id], references: [id])
  customer_id String   @unique

  created_at DateTime @default(now())

  @@index([otp])
}

model Driver {
  id           String  @id @default(uuid())
  name         String?
  phone_number String  @unique
  city         String?
  village      String?
  device_token String?
  earning      Decimal @default(0) @db.Decimal(10, 2)

  otp_token DriverOtpToken?
  car       Car?
  trips     Trip[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model DriverOtpToken {
  id  String @id @default(uuid())
  otp String @unique @db.Char(6)

  driver    Driver @relation(fields: [driver_id], references: [id])
  driver_id String @unique

  created_at DateTime @default(now())

  @@index([otp])
}

model Car {
  id             String  @id @default(uuid())
  license_number String  @unique
  model          String?
  brand          String?
  color          String?

  driver    Driver @relation(fields: [driver_id], references: [id])
  driver_id String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Trip {
  id String @id @default(uuid())

  from           String
  to             String
  seat_price     Decimal  @db.Decimal(10, 2)
  total_seats    Int
  reserved_seats Int      @default(0)
  departure_time DateTime
  is_full        Boolean  @default(false)

  status  TripStatus @default(PENDING)
  comment String?

  tickets   Ticket[]
  driver    Driver   @relation(fields: [driver_id], references: [id])
  driver_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([driver_id])
}

model Ticket {
  id String @id @default(uuid())

  trip      Trip     @relation(fields: [trip_id], references: [id])
  passenger Customer @relation(fields: [customer_id], references: [id])

  quantity     Int     @default(1)
  is_cancelled Boolean @default(false)

  trip_id     String
  customer_id String

  @@index([trip_id])
  @@index([customer_id])
}

enum TripStatus {
  PENDING
  DEPARTED
  COMPLETED
  CANCELLED
}
